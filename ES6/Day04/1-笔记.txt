string类型得方法
	1.trimStart() 去除字符串前面空格 trimLeft()
	2.trimEnd()  去除字符串后面得空格 trimRight()
	3.trim() 去除前后空格
	4.padStart(); 从头填充字符串 参数：填充好的字符串长度 填充得字符串
	5.padEnd() 从尾填充字符串 参数：填充好的字符串长度 填充得字符串
	6.replaceAll('1','x');
function对于toString重新修订
ES6 类 可以看成构造函数得另一种写法 创建对象得模板 使用class关键字声明类
	class Person{
		//构造器 构造实例
		constructor(name,age,gender){
			//实例私有方法和私有属性
			//1.创建一个实例 
			//2.将this指向实例
			//3.执行函数体
			//4.返回这个实例
			this.name = name;
			this.age = age;
			this.gender =gender;
			this.say = function(){}
		}
		//实例公共方法 类似于存在于原型对象中
		sayName(){
			
		}
		test = 基本数据类型; //实例公共属性
		test = 引用数据类型; //实例私有属性
		//只能由类本身去调用的方法
		static attr='静态属性';
		static fun = function(){
			静态方法
		}

	}
	实例属性和实例方法
		
	静态属性和静态方法
		static 
继承 ES6 实现继承
	class Animal{

	}
	class Dog extends Animal{
		子类无法声明自己私有属性 
		constructor(name,age,gender,type,color){
			如果子类提供了构造器 一定要显示调用super函数 执行父类构造器
			 否则报错 Animal.call()
			super(name,age,gender);
			this.type = type;
			this.color = color;
		}
	}
	子类去继承父类 
		子类可以调用父类静态属性和静态方法 
	Dog.__proto__ ===Animal;
	子类原型对象继承自父类得原型对象 
		子类实例调用父类实例属性和方法
		d1.sayName() d1.test 
	Dog.prototype.__proto__ ===Animal.prototype;
Symbol 
	新增基本数据类型 返回一个独一无二的值
	let sy1 = Symbol('name'); 参数：字符串 对这个值得描述
	应用：
		1.产生唯一的标识、值
		2.解决命名冲突问题
			let sy1 = Symbol('name');
			let sy2 = Symbol('age');
			let obj = {
				name:"zhangsan",
				age:12,
				[sy1]:'terry',
				[sy2]:18,
				[Symbol('email')]:'xxx@xx.com'
			}
			for in 循环遍历对象访问不到使用Symbol作为属性得值
			如果访问使用symbol值作为属性得属性 
			Object.getOwnProprertySymbols(obj);
			let arr = [Symbol('name'),Symbol('age')];
			obj[arr[0]]
		3.作为全局注册表 
			创建一个Symbol值并进行缓存,Symbol.for();
			let sy1 = Symbol.for('name')
			Symbol.keyFor(sy1) 查看当前Symbol值有没有在全局注册表中注册过 注册了会返回描述或者undefined
		4.消除魔术字符串 
				一个方法过于依赖字符串
		  function getArea(shape,options){
				let area = 0;
				switch(shape){
					case 'triangel':
					case Shape.SJX:
						area = .5 * options.width * options.height;
						break;
					case 'zfx':
					case Shape.ZFX:
						area = options.width * options.height;
						break;
					case Shape.CIRCLE:
						area = Math.PI * options.r * options.r;
						break;
					default:
						area = -1;
				}
			}
			let Shape = {
				SJX:Symbol('三角形'),
				ZFX:Symbol('正方形'),
				CIRCLE:Symbol('圆'),
			}
			getArea('triangel',{width:100,height:100})
			getArea(Shape.SJX,{width:100,height:100})
模板字符串
	可以使用${变量}
	let str  = 'name+age';
	let str `${name}+${age}`
ES6 新特性：
	变量 
	转码工具
	模块化
	解构
	拓展运算符
	箭头函数
	类 继承
	symbol
	模板字符串
	对象静态api拓展
	数组实例api和静态api拓展
	string类型api拓展
	迭代器
	 	为数据结构提供一种统一、简单的访问接口。迭代器对象本质主要是供for of来去消费,
		只要实现了迭代器接口 就可以使用for ...of遍历 
		for of本质/迭代器迭代过程就是调用迭代器对象的next方法 迭代器本质上就是指针对象
		指针对象指向数据结构的成员 
		第一次调用next方法指向数据结构的第一个成员
		依次调用依次指向成员 直到指向结束成员此时done返回值为true
	set集合 
	map
	Number
	async 
	promise
	generator 

Map 和 Object区别？
	1.map的键可以是任意数据类型，但是对象只能是string或者symbol值
	2.map可以通过size属性获取键值对个数，但是对象没有该属性去获取
	3.遍历map可以使用for ..of遍历 因为实现了迭代器接口
	4.对象没有实现迭代器接口 只能使用for in循环遍历
	5.map也可以通过forEach遍历 接收回调函数作为参数
	6.频繁删除键值对使用map

	