js
    Day01
        js概念:是一门函数优先/轻量级的一门需要解析器解析执行的编程语言。前端编程 后端编程nodejs
        js运行环境:nodejs   浏览器
        js组成: ECMScript   核心js 变量 注释 数据类型 函数 对象 数组 正则 继承 原型
            ***常见问题:
                1.隐式转换 显示转换     [] + []     {} + [] + [] + {}
                2.数据类型
                3.变量声明 var 特点
                4.基本数据类型 引入数据类型区别
                5.深拷贝和浅拷贝
                6.如何实现深拷贝
                7.原型概念
                8.对象 this指向 定义属性
                9.数组 (高频) 数组去重 扁平化 重构方法 字符串 反转字符串
                10.闭包 修改this指向问题
            DOM(Document Object Model) 文档对象模型
                第三方库
                    document.getElement('#one')
                JQuery框架 操作网页的api和接口
            BOM(Browser Object Model) 浏览器对象模型
                操作浏览器的api和接口
        js标识符命名规则:
            1.由字母、数字、下划线、$组成
            2.不能以数字开头
            3.不能使用关键字和保留字 class break
            4.建议使用驼峰式命名
        js var 声明变量特点
            1.会变量提升 不存在暂时性死区
            2.可以重复声明
            3.不存在块级作用域
        js 作用域
            1.函数内部使用var声明是局部变量
            2.函数外部使用var声明是全局变量
    Day02
        1.隐式转换
          1.num + 其他数据类型(除去字符串)隐式将其他数据类型转为number
             num + str 字符串拼接
          2.- / * % 将其他数据类型转为number
          3.== 将左右两侧数据类型转为number比较
          4.!a将数据类型转为boolean
          5.数据类型调用toString()和valueOf() {} + {} [] + [] [] + {}
            重写toSting和valueOf 两者都重写 valueOf
        2.数值检测
          1.isNaN 判断一个数据类型是否不为一个数字 //数字返回:false 非数字:true
          2.isFinite 检测一个数据类型是否为有效数值
          3.isFinite(Infinity) false
        3.类型判断 typeOf 检测结果 null Object 之间关系     类型编码 000 000
          数据类型:
            1.基本数据类型 number string boolean boolean null undefined symbol bigint
            2.引出数据类型 Object array function(){}
          number string boolean Object undefined symbol bigint function(){}
        4.浅拷贝    深拷贝
          引用地址的拷贝就是浅拷贝
          值的拷贝就是深拷贝
          如何实现深拷贝?
            1.JSON.parse(JSON.stringify(obj))
            2.lodash库
            3.assign
        5.算术运算符
            + - / * %
        6.一元运算符
            ! + - ++ -- delete  数组元素或者对象数组
        7.赋值运算符
            = += -= /= *= &=
        8.比较运算符
            &&  ==  ===  ||  !=  !==
            &&同真才真 有假就假
             如果是两个操作数进行比较 如果第一个操作数是假的 返回第一个操作数
             如果第一个操作数是真的 返回第二个操作数
             console.log(null && undefined);
            ||同假才假 有真就真
            如果是两个操作数进行比较 如果第一个操作数是真的 返回第一个操作数
            如果第一个操作数是假的 返回第二个操作数
            console.log("" || 'hello');
        9.== 和 ===区别？
            1.==会进行隐式转换 先转换为同一数据类型再比较值
                值相同 返回true 值不同返回false
                string number boolean
            2.=== 会先比较数据类型 类型不一致 直接返回false
    Day03
        1.三目运算符:
            表达式?"满足表达式":"不满足表达式"
        2.类型转换(string number boolean)
            1.将其他数据类型转为String类型
                1.String()
                2.使用字符串拼接 + ""
                3.使用toSting()
                    number.toString(2,8,10,16)
            2.将其他数据类型转为number类型
                对象转为number类型 默认四个调用toString()
                1.Number()
                2.+
                3.parseInt() 取整
                4.parseFloat() 保留小数
            3.将其他数据类型转为boolean
                1.Boolean()
                2.!!a
        3.流程分支控制语句
            1.if(){}else if(){}else()
            2.switch(表达式){
                case n:
                    case语句;
                    break;
                case n1:
                    case语句;
                    break;
                case n2:
                    case语句;
                    break;
                case n3:
                    case语句;
                    break;
                default:
                    默认语句:
            }
            3.while(表达式满足){
                循环
            }
            4.do{
                // 至少执行一次
                循环体:
                迭代条件
            }while(表达式)
            5.for(var i = 0 ;i < 10; i++){}
            6.for(var key in obj/arr){
                obj key ---属性名
                arr key ---index
            }
        4.递归
            函数自身调用函数 跳出条件 产生函数一直调用变量
            function fc(n){
                if(n==1){return res=1}
                return fc(n-1) * n
            }
    Day04
        1.对象
            创建单个对象
            1.字面量 var obj = {}
            2.构造函数 var obj = new Object();
        2.访问/删除对象
            obj.name
            var a = 'gender';   obj[a] = 'male'
            obj['age']  -中括号解析变量
            delete obj['name']
        3.检测属性
            in 检测自有属性或者继承属性
            console.log('属性名', in obj);
            hasOwnProperty 检测自有属性 对于继承属性返回false
            obj.hasOwnProperty('name')
            propertyIsEnumerable 检测可枚举属性 
        4.原型
          每个构造函数都有一个指针(prototype)指向原型对象
          每一个原型对象都有一个指针(constructor)指向构造函数
          每一个实例对象都有一个指针(__proto__)指向原型对象
    Day05
        1.数据属性
          configurable 配置当前属性可删除 false 不可删除
          writable     配置当前属性可修改 false 不可修改
          value        设置当前属性属性值
          enumerable   可枚举
        都需要定义在Object.defineProperty(obj, 'name', {
            configurable 配置当前属性可删除 false 不可删除
            writable     配置当前属性可修改 false 不可修改
            value        设置当前属性属性值
            enumerable   可枚举
        });
        定义多个属性
            Object.defineProperties(obj,{
                name:{},
                age:{}
            })
        2.读取属性特性
            Object.getOwnPropertyDescriptor(obj, 'name')
            Object.getOwnPropertyDescriptors(obj)
        3.访问器属性
            configurable
            enumerable
            set函数
            get函数
            私有属性 不直接修改
        4.对象序列化
            将对象转为json字符串 基本数据类型 {"name":"age"} string
            JSON.stringify(obj)
            将json字符串转为对象
            JSON.parse()
        5.静态方法和实例方法/原型方法
        静态方法是只能由构造函数本身去调用
            Object.defineProperty()
            Object.getOwnPropertyDescriptor()
        实例方法实例访问原型对象中的方法
            obj.toString()
            obj.valueOf()
            obj.constructor()
        数组
            1.创建数组
                字面量 var arr = []
                构造函数 var arr = new Array()
                    1.参数整数 表示数组长度
                    2.其他类型 数组元素
                api Array.of()
            2.数组api
                1.序列化(不修改)
                    toString() 将数组转为字符串
                    join("-") 将数组转为字符串
                    JSON.parse(JSON.stringify(arr))
                2.栈和队列方法(修改原数组)
                    pop() 删除数组元素 从末尾开始
                    push() 添加数组元素 从末尾开始
                    shift() 删除数组元素 默认从头开始 
                    unShift() 添加数组元素 默认从头开始
                3.排序方法(修改原数组)
                    reverse 反转数组
                    sort 对数组排序 function(a,b){if(a>b)}{return 1}
                4.操作方法
                    1.concat 拼接数组 不修改原数组
                    2.slice 截取数组元素 不修改原数组
                    3.splice 删除或者添加数组元素 修改原数组
                5.位置方法(不修改原数组)
                    1.indexOf()  从前往后查找数组元素 返回下标或者-1
                    1.lastIndexOf()  从后往前查找数组元素 返回下标或者-1
                6.迭代方法(不修改原数组) 数组中断方法 some every
                    1.some 判断数组元素是否符合表达式 一项符合直接返回true 跳出循环
                    2.every 判断数组元素是否符合表达式 一项不符合直接返回false 跳出循环
                    3.forEach 遍历数组元素
                    4.map 映射 对每一个数组元素进行操作 Number(item)
                    5.filter 过滤除符合表达式数组元素 组成新数组
 
                    
