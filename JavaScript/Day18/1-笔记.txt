BOM
	1.location对象 
		属性：
			1.href 获取当前文档的url
			2.host 获取域名加端口号
			3.hostName 不获取端口号
			4.port 端口号
			5.search 查询字符串
		方法：
			1.assign方法 打开一个页面  url
			 	会产生一条历史记录 
			2.replace方法 替换页面 url
				不会产生历史记录
			3.reload 刷新页面 true false默认值 
	2.history对象
		1.length 网址数
		2.forward方法 前进一个页面
		3.back方法 后退一个页面 
		4.go() 正数 负数 前进或者后退页面  -1
	3.超时调用 间歇调用
		超过一段时间调用函数一次 返回一个id  可以用来取消超时调用
		id = setTimeout(function(){
			执行代码
		},wait) wait毫秒
		clearTimeout(id)
		每隔一段时间函数调用一次  返回一个id  可以用来取消间歇调用
		id = setInterval(function(){ 
		},wait)
	4.ajax 
		异步的XML和JavaScript,用于浏览器和服务器进行数据交互。
		发起一个异步请求  
		get 无参
			1.创建一个请求实例
			var xhr = new XMLHttpRequest();
			2.打开一个链接 
			xhr.open('get','http://121.0.0.1:5500/findAll');
			3.发送请求
			xhr.send()
			4.监听状态改变 接收响应
			xhr.onreadyStateChange = function(){
				readyState  0 open未调用 1 open已调用 2接收响应头信息 3.接收响应体信息 
				if(xhr.readyState ===4 && xhr.status===200){
					xhr.response ----json字符串  JSON.parse();
					var res = JSON.parse(xhr.response);
					res.data.forEach(function(item){
						var div = document.createElement('div');
						div.innerHTML = item.content;
						document.body.appendChild(div)
					})
				}
			}
		get 参数 携带在url地址栏 ?name=terry&age=12 查询字符串 
				1.创建一个请求实例
			var xhr = new XMLHttpRequest();
			var params = {
				page:1,
				pageSize:10
			}
			2.打开一个链接 
			xhr.open('get','http://121.0.0.1:5500/findAll'+"?"+Qs.stringify(params));
			3.发送请求
			xhr.send()
			4.监听状态改变 接收响应
			xhr.onreadyStateChange = function(){
				readyState  0 open未调用 1 open已调用 2接收响应头信息 3.接收响应体信息 
				if(xhr.readyState ===4 && xhr.status===200){
					xhr.response ----json字符串  JSON.parse();
					var res = JSON.parse(xhr.response);
					res.data.forEach(function(item){
						var div = document.createElement('div');
						div.innerHTML = item.content;
						document.body.appendChild(div)
					})
				}
			}
		post json
				1.创建一个请求实例
			var xhr = new XMLHttpRequest();
			
			2.1打开一个链接 
			xhr.open('post','http://121.0.0.1:5500/user/login');

			var params = {
				username:'admin1',
				password:123321
			}
			2.2 设置请求头格式
			xhr.setRequestHeader('Content-type','application/json;charset=UTF-8');
			3.发送请求
			xhr.send(JSON.stringify(params))
			4.监听状态改变 接收响应
			xhr.onreadyStateChange = function(){
				readyState  0 open未调用 1 open已调用 2接收响应头信息 3.接收响应体信息 
				if(xhr.readyState ===4 && xhr.status===200){
					xhr.response ----json字符串  JSON.parse();
					var res = JSON.parse(xhr.response);
					res.data.forEach(function(item){
						var div = document.createElement('div');
						div.innerHTML = item.content;
						document.body.appendChild(div)
					})
				}
			}
		post 表单格式
			1.创建一个请求实例
			var xhr = new XMLHttpRequest();
			
			2.1打开一个链接 
			xhr.open('post','http://121.0.0.1:5500/user/saveOrUpdate');

			var params = {
				username:'admin1',
				password:123321,
				telephone:15536332889
			}
		  接口需要表单格式  post的表单格式就是get查询字符串 
			2.2 设置请求头格式
			xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded;charset=UTF-8');
			3.发送请求
			xhr.send(Qs.strinfify(params))
			4.监听状态改变 接收响应
			xhr.onreadyStateChange = function(){
				readyState  0 open未调用 1 open已调用 2接收响应头信息 3.接收响应体信息 
				if(xhr.readyState ===4 && xhr.status===200){
					xhr.response ----json字符串  JSON.parse();
					var res = JSON.parse(xhr.response);
					res.data.forEach(function(item){
						var div = document.createElement('div');
						div.innerHTML = item.content;
						document.body.appendChild(div)
					})
				}
			}
		
-------------------------------------------------------------
防抖和节流?
	undescore lodash  debounce throttle	
	防抖：事件被频繁触发，在规定的时间内一直触发函数，会重新计算时间，直到达到时间，函数才会执行最后一次
		执行函数的最后一次代码 
	节流：事件被频繁的触发 每隔一段时间函数最多执行一次 
	目的：优化高频率发生事件  鼠标移动 滚动条 搜索框
	lodash undescore 
	npm install lodash undescore -S
	var _ = require('lodash');
	input.oninput = _.debounce(function(){
		xxxxx
	},1000)
	input.oninput = _.throttle(function(){
		xxxxx
	},1000)
ES6 5-6天 新特性 全是重点  es6以上 2015.6
Vue 7月底 
面试题：
	es5
		内置类型
		基本数据类型和引用数据类型区别
		浅拷贝和深拷贝 
		数组 去重 api  扁平化 
		对象 原型 
		函数 修改this指向 this问题 
		arguments 
		继承 原型链 
	 es6 vue
				

	